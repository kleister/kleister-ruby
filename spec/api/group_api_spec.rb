# Kleister OpenAPI
#
# API definition for Kleister, manage mod packs for Minecraft
#
# The version of the OpenAPI document: 1.0.0-alpha1
# Contact: kleister@webhippie.de
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'spec_helper'
require 'json'

# Unit tests for Kleister::GroupApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GroupApi' do
  before do
    # run before each test
    @api_instance = Kleister::GroupApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GroupApi' do
    it 'should create an instance of GroupApi' do
      expect(@api_instance).to be_instance_of(Kleister::GroupApi)
    end
  end

  # unit tests for attach_group_to_mod
  # Attach a mod to group
  # @param group_id A group identifier or slug
  # @param permit_group_mod_request The group mod data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'attach_group_to_mod test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for attach_group_to_pack
  # Attach a pack to group
  # @param group_id A group identifier or slug
  # @param permit_group_pack_request The group pack data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'attach_group_to_pack test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for attach_group_to_user
  # Attach a user to group
  # @param group_id A group identifier or slug
  # @param permit_pack_user_request The group user data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'attach_group_to_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_group
  # Create a new group
  # @param create_group_request The group data to create
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'create_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_group
  # Delete a specific group
  # @param group_id A group identifier or slug
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'delete_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_group_from_mod
  # Unlink a mod from group
  # @param group_id A group identifier or slug
  # @param delete_group_from_mod_request The group mod data to unlink
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'delete_group_from_mod test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_group_from_pack
  # Unlink a pack from group
  # @param group_id A group identifier or slug
  # @param delete_group_from_pack_request The group pack data to unlink
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'delete_group_from_pack test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_group_from_user
  # Unlink a user from group
  # @param group_id A group identifier or slug
  # @param delete_pack_from_user_request The group user data to unlink
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'delete_group_from_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_group_mods
  # Fetch all mods attached to group
  # @param group_id A group identifier or slug
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Search query
  # @option opts [String] :sort Sorting column
  # @option opts [String] :order Sorting order
  # @option opts [Integer] :limit Paging limit
  # @option opts [Integer] :offset Paging offset
  # @return [ListGroupMods200Response]
  describe 'list_group_mods test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_group_packs
  # Fetch all packs attached to group
  # @param group_id A group identifier or slug
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Search query
  # @option opts [String] :sort Sorting column
  # @option opts [String] :order Sorting order
  # @option opts [Integer] :limit Paging limit
  # @option opts [Integer] :offset Paging offset
  # @return [ListGroupPacks200Response]
  describe 'list_group_packs test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_group_users
  # Fetch all users attached to group
  # @param group_id A group identifier or slug
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Search query
  # @option opts [String] :sort Sorting column
  # @option opts [String] :order Sorting order
  # @option opts [Integer] :limit Paging limit
  # @option opts [Integer] :offset Paging offset
  # @return [ListGroupUsers200Response]
  describe 'list_group_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_groups
  # Fetch all available groups
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Search query
  # @option opts [String] :sort Sorting column
  # @option opts [String] :order Sorting order
  # @option opts [Integer] :limit Paging limit
  # @option opts [Integer] :offset Paging offset
  # @return [ListGroups200Response]
  describe 'list_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for permit_group_mod
  # Update mod perms for group
  # @param group_id A group identifier or slug
  # @param permit_group_mod_request The group mod data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'permit_group_mod test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for permit_group_pack
  # Update pack perms for group
  # @param group_id A group identifier or slug
  # @param permit_group_pack_request The group pack data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'permit_group_pack test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for permit_group_user
  # Update user perms for group
  # @param group_id A group identifier or slug
  # @param permit_pack_user_request The group user data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'permit_group_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for show_group
  # Fetch a specific group
  # @param group_id A group identifier or slug
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'show_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_group
  # Update a specific group
  # @param group_id A group identifier or slug
  # @param create_group_request The group data to update
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'update_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end
end
