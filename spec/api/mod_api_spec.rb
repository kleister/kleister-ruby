# Kleister OpenAPI
#
# API definition for Kleister, manage mod packs for Minecraft
#
# The version of the OpenAPI document: 1.0.0-alpha1
# Contact: kleister@webhippie.de
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'spec_helper'
require 'json'

# Unit tests for Kleister::ModApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ModApi' do
  before do
    # run before each test
    @api_instance = Kleister::ModApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ModApi' do
    it 'should create an instance of ModApi' do
      expect(@api_instance).to be_instance_of(Kleister::ModApi)
    end
  end

  # unit tests for attach_mod_to_group
  # Attach a group to mod
  # @param mod_id A mod identifier or slug
  # @param permit_pack_group_request The mod group data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'attach_mod_to_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for attach_mod_to_user
  # Attach a user to mod
  # @param mod_id A mod identifier or slug
  # @param permit_pack_user_request The mod user data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'attach_mod_to_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for attach_version_to_build
  # Attach a build to a version
  # @param mod_id A mod identifier or slug
  # @param version_id A version identifier or slug
  # @param attach_minecraft_to_build_request The version build data to create or delete
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'attach_version_to_build test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_mod
  # Create a new mod
  # @param create_mod_request The mod data to create
  # @param [Hash] opts the optional parameters
  # @return [Mod]
  describe 'create_mod test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_mod_avatar
  # Upload an avatar for the defined mod
  # @param mod_id A mod identifier or slug
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file
  # @return [ModAvatar]
  describe 'create_mod_avatar test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_pack_avatar
  # Upload an avatar for the defined pack
  # @param pack_id A pack identifier or slug
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file
  # @return [PackAvatar]
  describe 'create_pack_avatar test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_version
  # Create a new version for a mod
  # @param mod_id A mod identifier or slug
  # @param create_version_request The version data to create
  # @param [Hash] opts the optional parameters
  # @return [Version]
  describe 'create_version test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_mod
  # Delete a specific mod
  # @param mod_id A mod identifier or slug
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'delete_mod test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_mod_avatar
  # Delete the avatar for the defined mod
  # @param mod_id A mod identifier or slug
  # @param [Hash] opts the optional parameters
  # @return [ModAvatar]
  describe 'delete_mod_avatar test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_mod_from_group
  # Unlink a group from mod
  # @param mod_id A mod identifier or slug
  # @param delete_pack_from_group_request The mod group data to unlink
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'delete_mod_from_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_mod_from_user
  # Unlink a user from mod
  # @param mod_id A mod identifier or slug
  # @param delete_pack_from_user_request The mod user data to unlink
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'delete_mod_from_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_pack_avatar
  # Delete the avatar for the defined pack
  # @param pack_id A pack identifier or slug
  # @param [Hash] opts the optional parameters
  # @return [PackAvatar]
  describe 'delete_pack_avatar test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_version
  # Delete a specific version for a mod
  # @param mod_id A mod identifier or slug
  # @param version_id A version identifier or slug
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'delete_version test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_version_from_build
  # Unlink a build from a version
  # @param mod_id A mod identifier or slug
  # @param version_id A version identifier or slug
  # @param attach_minecraft_to_build_request The version build data to create or delete
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'delete_version_from_build test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_mod_groups
  # Fetch all groups attached to mod
  # @param mod_id A mod identifier or slug
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Search query
  # @option opts [String] :sort Sorting column
  # @option opts [String] :order Sorting order
  # @option opts [Integer] :limit Paging limit
  # @option opts [Integer] :offset Paging offset
  # @return [ListModGroups200Response]
  describe 'list_mod_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_mod_users
  # Fetch all users attached to mod
  # @param mod_id A mod identifier or slug
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Search query
  # @option opts [String] :sort Sorting column
  # @option opts [String] :order Sorting order
  # @option opts [Integer] :limit Paging limit
  # @option opts [Integer] :offset Paging offset
  # @return [ListModUsers200Response]
  describe 'list_mod_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_mods
  # Fetch all available mods
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Search query
  # @option opts [String] :sort Sorting column
  # @option opts [String] :order Sorting order
  # @option opts [Integer] :limit Paging limit
  # @option opts [Integer] :offset Paging offset
  # @return [ListMods200Response]
  describe 'list_mods test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_version_builds
  # Fetch all builds attached to version
  # @param mod_id A mod identifier or slug
  # @param version_id A version identifier or slug
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Search query
  # @option opts [String] :sort Sorting column
  # @option opts [String] :order Sorting order
  # @option opts [Integer] :limit Paging limit
  # @option opts [Integer] :offset Paging offset
  # @return [ListVersionBuilds200Response]
  describe 'list_version_builds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_versions
  # Fetch all available versions for a mod
  # @param mod_id A mod identifier or slug
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search Search query
  # @option opts [String] :sort Sorting column
  # @option opts [String] :order Sorting order
  # @option opts [Integer] :limit Paging limit
  # @option opts [Integer] :offset Paging offset
  # @return [ListVersions200Response]
  describe 'list_versions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for permit_mod_group
  # Update group perms for mod
  # @param mod_id A mod identifier or slug
  # @param permit_pack_group_request The mod group data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'permit_mod_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for permit_mod_user
  # Update user perms for mod
  # @param mod_id A mod identifier or slug
  # @param permit_pack_user_request The mod user data to permit
  # @param [Hash] opts the optional parameters
  # @return [Notification]
  describe 'permit_mod_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for show_mod
  # Fetch a specific mod
  # @param mod_id A mod identifier or slug
  # @param [Hash] opts the optional parameters
  # @return [Mod]
  describe 'show_mod test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for show_version
  # Fetch a specific version for a mod
  # @param mod_id A mod identifier or slug
  # @param version_id A version identifier or slug
  # @param [Hash] opts the optional parameters
  # @return [Version]
  describe 'show_version test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_mod
  # Update a specific mod
  # @param mod_id A mod identifier or slug
  # @param create_mod_request The mod data to update
  # @param [Hash] opts the optional parameters
  # @return [Mod]
  describe 'update_mod test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_version
  # Update a specific version for a mod
  # @param mod_id A mod identifier or slug
  # @param version_id A version identifier or slug
  # @param create_version_request The version data to update
  # @param [Hash] opts the optional parameters
  # @return [Version]
  describe 'update_version test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end
end
