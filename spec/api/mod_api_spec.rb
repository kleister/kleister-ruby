=begin
#Kleister OpenAPI

#API definition for Kleister, manage mod packs for Minecraft

The version of the OpenAPI document: 1.0.0-alpha1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Kleister::ModApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ModApi' do
  before do
    # run before each test
    @api_instance = Kleister::ModApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ModApi' do
    it 'should create an instance of ModApi' do
      expect(@api_instance).to be_instance_of(Kleister::ModApi)
    end
  end

  # unit tests for append_mod_to_team
  # Assign a team to mod
  # @param mod_id A mod UUID or slug
  # @param params The mod team data to assign
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'append_mod_to_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for append_mod_to_user
  # Assign a user to mod
  # @param mod_id A mod UUID or slug
  # @param params The mod user data to assign
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'append_mod_to_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for append_version_to_build
  # Assign a build to a version
  # @param mod_id A mod UUID or slug
  # @param version_id A version UUID or slug
  # @param params The build data to append to version
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'append_version_to_build test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_mod
  # Create a new mod
  # @param params The mod data to create
  # @param [Hash] opts the optional parameters
  # @return [Mod]
  describe 'create_mod test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_version
  # Create a new version for a mod
  # @param mod_id A mod UUID or slug
  # @param params The version data to create
  # @param [Hash] opts the optional parameters
  # @return [Version]
  describe 'create_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_mod
  # Delete a specific mod
  # @param mod_id A mod UUID or slug
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'delete_mod test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_mod_from_team
  # Remove a team from mod
  # @param mod_id A mod UUID or slug
  # @param params The mod team data to delete
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'delete_mod_from_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_mod_from_user
  # Remove a user from mod
  # @param mod_id A mod UUID or slug
  # @param params The mod user data to delete
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'delete_mod_from_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_version
  # Delete a specific version for a mod
  # @param mod_id A mod UUID or slug
  # @param version_id A version UUID or slug
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'delete_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_version_from_build
  # Unlink a build from a version
  # @param mod_id A mod UUID or slug
  # @param version_id A version UUID or slug
  # @param params The build data to unlink from version
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'delete_version_from_build test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_mod_teams
  # Fetch all teams assigned to mod
  # @param mod_id A mod UUID or slug
  # @param [Hash] opts the optional parameters
  # @return [Array<TeamMod>]
  describe 'list_mod_teams test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_mod_users
  # Fetch all users assigned to mod
  # @param mod_id A mod UUID or slug
  # @param [Hash] opts the optional parameters
  # @return [Array<UserMod>]
  describe 'list_mod_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_mods
  # Fetch all available mods
  # @param [Hash] opts the optional parameters
  # @return [Array<Mod>]
  describe 'list_mods test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_version_builds
  # Fetch all builds assigned to version
  # @param mod_id A mod UUID or slug
  # @param version_id A version UUID or slug
  # @param [Hash] opts the optional parameters
  # @return [Array<BuildVersion>]
  describe 'list_version_builds test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_versions
  # Fetch all available versions for a mod
  # @param mod_id A mod UUID or slug
  # @param [Hash] opts the optional parameters
  # @return [Array<Version>]
  describe 'list_versions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for permit_mod_team
  # Update team perms for mod
  # @param mod_id A mod UUID or slug
  # @param params The mod team data to update
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'permit_mod_team test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for permit_mod_user
  # Update user perms for mod
  # @param mod_id A mod UUID or slug
  # @param params The mod user data to update
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'permit_mod_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_mod
  # Fetch a specific mod
  # @param mod_id A mod UUID or slug
  # @param [Hash] opts the optional parameters
  # @return [Mod]
  describe 'show_mod test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_version
  # Fetch a specific version for a mod
  # @param mod_id A mod UUID or slug
  # @param version_id A version UUID or slug
  # @param [Hash] opts the optional parameters
  # @return [Version]
  describe 'show_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_mod
  # Update a specific mod
  # @param mod_id A mod UUID or slug
  # @param params The mod data to update
  # @param [Hash] opts the optional parameters
  # @return [Mod]
  describe 'update_mod test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_version
  # Update a specific version for a mod
  # @param mod_id A mod UUID or slug
  # @param version_id A version UUID or slug
  # @param params The version data to update
  # @param [Hash] opts the optional parameters
  # @return [Version]
  describe 'update_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
