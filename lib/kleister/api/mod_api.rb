=begin
#Kleister OpenAPI

#API definition for Kleister, manage mod packs for Minecraft

The version of the OpenAPI document: 1.0.0-alpha1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'uri'

module Kleister
  class ModApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign a team to mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_team [ModTeamParams] The mod team data to assign
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def append_mod_to_team(mod_id, mod_team, opts = {})
      data, _status_code, _headers = append_mod_to_team_with_http_info(mod_id, mod_team, opts)
      data
    end

    # Assign a team to mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_team [ModTeamParams] The mod team data to assign
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def append_mod_to_team_with_http_info(mod_id, mod_team, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.append_mod_to_team ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.append_mod_to_team"
      end
      # verify the required parameter 'mod_team' is set
      if @api_client.config.client_side_validation && mod_team.nil?
        fail ArgumentError, "Missing the required parameter 'mod_team' when calling ModApi.append_mod_to_team"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/teams'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(mod_team) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#append_mod_to_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign a user to mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_user [ModUserParams] The mod user data to assign
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def append_mod_to_user(mod_id, mod_user, opts = {})
      data, _status_code, _headers = append_mod_to_user_with_http_info(mod_id, mod_user, opts)
      data
    end

    # Assign a user to mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_user [ModUserParams] The mod user data to assign
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def append_mod_to_user_with_http_info(mod_id, mod_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.append_mod_to_user ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.append_mod_to_user"
      end
      # verify the required parameter 'mod_user' is set
      if @api_client.config.client_side_validation && mod_user.nil?
        fail ArgumentError, "Missing the required parameter 'mod_user' when calling ModApi.append_mod_to_user"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/users'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(mod_user) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#append_mod_to_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign a build to a version
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param version_build [VersionBuildParams] The build data to append to version
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def append_version_to_build(mod_id, version_id, version_build, opts = {})
      data, _status_code, _headers = append_version_to_build_with_http_info(mod_id, version_id, version_build, opts)
      data
    end

    # Assign a build to a version
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param version_build [VersionBuildParams] The build data to append to version
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def append_version_to_build_with_http_info(mod_id, version_id, version_build, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.append_version_to_build ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.append_version_to_build"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.append_version_to_build"
      end
      # verify the required parameter 'version_build' is set
      if @api_client.config.client_side_validation && version_build.nil?
        fail ArgumentError, "Missing the required parameter 'version_build' when calling ModApi.append_version_to_build"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}/builds'.sub('{' + 'mod_id' + '}', mod_id.to_s).sub('{' + 'version_id' + '}', version_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(version_build) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#append_version_to_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new mod
    # @param mod [Mod] The mod data to create
    # @param [Hash] opts the optional parameters
    # @return [Mod]
    def create_mod(mod, opts = {})
      data, _status_code, _headers = create_mod_with_http_info(mod, opts)
      data
    end

    # Create a new mod
    # @param mod [Mod] The mod data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mod, Integer, Hash)>] Mod data, response status code and response headers
    def create_mod_with_http_info(mod, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.create_mod ...'
      end
      # verify the required parameter 'mod' is set
      if @api_client.config.client_side_validation && mod.nil?
        fail ArgumentError, "Missing the required parameter 'mod' when calling ModApi.create_mod"
      end
      # resource path
      local_var_path = '/mods'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(mod) 

      # return_type
      return_type = opts[:return_type] || 'Mod' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#create_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new version for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param version [Version] The version data to create
    # @param [Hash] opts the optional parameters
    # @return [Version]
    def create_version(mod_id, version, opts = {})
      data, _status_code, _headers = create_version_with_http_info(mod_id, version, opts)
      data
    end

    # Create a new version for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param version [Version] The version data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Version, Integer, Hash)>] Version data, response status code and response headers
    def create_version_with_http_info(mod_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.create_version ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.create_version"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ModApi.create_version"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/versions'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(version) 

      # return_type
      return_type = opts[:return_type] || 'Version' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#create_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_mod(mod_id, opts = {})
      data, _status_code, _headers = delete_mod_with_http_info(mod_id, opts)
      data
    end

    # Delete a specific mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_mod_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_mod ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_mod"
      end
      # resource path
      local_var_path = '/mods/{mod_id}'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a team from mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_team [ModTeamParams] The mod team data to delete
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_mod_from_team(mod_id, mod_team, opts = {})
      data, _status_code, _headers = delete_mod_from_team_with_http_info(mod_id, mod_team, opts)
      data
    end

    # Remove a team from mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_team [ModTeamParams] The mod team data to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_mod_from_team_with_http_info(mod_id, mod_team, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_mod_from_team ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_mod_from_team"
      end
      # verify the required parameter 'mod_team' is set
      if @api_client.config.client_side_validation && mod_team.nil?
        fail ArgumentError, "Missing the required parameter 'mod_team' when calling ModApi.delete_mod_from_team"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/teams'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(mod_team) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_mod_from_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_user [ModUserParams] The mod user data to delete
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_mod_from_user(mod_id, mod_user, opts = {})
      data, _status_code, _headers = delete_mod_from_user_with_http_info(mod_id, mod_user, opts)
      data
    end

    # Remove a user from mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_user [ModUserParams] The mod user data to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_mod_from_user_with_http_info(mod_id, mod_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_mod_from_user ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_mod_from_user"
      end
      # verify the required parameter 'mod_user' is set
      if @api_client.config.client_side_validation && mod_user.nil?
        fail ArgumentError, "Missing the required parameter 'mod_user' when calling ModApi.delete_mod_from_user"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/users'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(mod_user) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_mod_from_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific version for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_version(mod_id, version_id, opts = {})
      data, _status_code, _headers = delete_version_with_http_info(mod_id, version_id, opts)
      data
    end

    # Delete a specific version for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_version_with_http_info(mod_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_version ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.delete_version"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}'.sub('{' + 'mod_id' + '}', mod_id.to_s).sub('{' + 'version_id' + '}', version_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlink a build from a version
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param version_build [VersionBuildParams] The build data to unlink from version
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_version_from_build(mod_id, version_id, version_build, opts = {})
      data, _status_code, _headers = delete_version_from_build_with_http_info(mod_id, version_id, version_build, opts)
      data
    end

    # Unlink a build from a version
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param version_build [VersionBuildParams] The build data to unlink from version
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_version_from_build_with_http_info(mod_id, version_id, version_build, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_version_from_build ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_version_from_build"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.delete_version_from_build"
      end
      # verify the required parameter 'version_build' is set
      if @api_client.config.client_side_validation && version_build.nil?
        fail ArgumentError, "Missing the required parameter 'version_build' when calling ModApi.delete_version_from_build"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}/builds'.sub('{' + 'mod_id' + '}', mod_id.to_s).sub('{' + 'version_id' + '}', version_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(version_build) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_version_from_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all teams assigned to mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<TeamMod>]
    def list_mod_teams(mod_id, opts = {})
      data, _status_code, _headers = list_mod_teams_with_http_info(mod_id, opts)
      data
    end

    # Fetch all teams assigned to mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TeamMod>, Integer, Hash)>] Array<TeamMod> data, response status code and response headers
    def list_mod_teams_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_mod_teams ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.list_mod_teams"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/teams'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<TeamMod>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_mod_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all users assigned to mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<UserMod>]
    def list_mod_users(mod_id, opts = {})
      data, _status_code, _headers = list_mod_users_with_http_info(mod_id, opts)
      data
    end

    # Fetch all users assigned to mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserMod>, Integer, Hash)>] Array<UserMod> data, response status code and response headers
    def list_mod_users_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_mod_users ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.list_mod_users"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/users'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UserMod>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_mod_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all available mods
    # @param [Hash] opts the optional parameters
    # @return [Array<Mod>]
    def list_mods(opts = {})
      data, _status_code, _headers = list_mods_with_http_info(opts)
      data
    end

    # Fetch all available mods
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Mod>, Integer, Hash)>] Array<Mod> data, response status code and response headers
    def list_mods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_mods ...'
      end
      # resource path
      local_var_path = '/mods'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Mod>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_mods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all builds assigned to version
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<BuildVersion>]
    def list_version_builds(mod_id, version_id, opts = {})
      data, _status_code, _headers = list_version_builds_with_http_info(mod_id, version_id, opts)
      data
    end

    # Fetch all builds assigned to version
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BuildVersion>, Integer, Hash)>] Array<BuildVersion> data, response status code and response headers
    def list_version_builds_with_http_info(mod_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_version_builds ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.list_version_builds"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.list_version_builds"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}/builds'.sub('{' + 'mod_id' + '}', mod_id.to_s).sub('{' + 'version_id' + '}', version_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<BuildVersion>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_version_builds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all available versions for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<Version>]
    def list_versions(mod_id, opts = {})
      data, _status_code, _headers = list_versions_with_http_info(mod_id, opts)
      data
    end

    # Fetch all available versions for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Version>, Integer, Hash)>] Array<Version> data, response status code and response headers
    def list_versions_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_versions ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.list_versions"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/versions'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Version>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update team perms for mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_team [ModTeamParams] The mod team data to update
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def permit_mod_team(mod_id, mod_team, opts = {})
      data, _status_code, _headers = permit_mod_team_with_http_info(mod_id, mod_team, opts)
      data
    end

    # Update team perms for mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_team [ModTeamParams] The mod team data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def permit_mod_team_with_http_info(mod_id, mod_team, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.permit_mod_team ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.permit_mod_team"
      end
      # verify the required parameter 'mod_team' is set
      if @api_client.config.client_side_validation && mod_team.nil?
        fail ArgumentError, "Missing the required parameter 'mod_team' when calling ModApi.permit_mod_team"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/teams'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(mod_team) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#permit_mod_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user perms for mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_user [ModUserParams] The mod user data to update
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def permit_mod_user(mod_id, mod_user, opts = {})
      data, _status_code, _headers = permit_mod_user_with_http_info(mod_id, mod_user, opts)
      data
    end

    # Update user perms for mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod_user [ModUserParams] The mod user data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def permit_mod_user_with_http_info(mod_id, mod_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.permit_mod_user ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.permit_mod_user"
      end
      # verify the required parameter 'mod_user' is set
      if @api_client.config.client_side_validation && mod_user.nil?
        fail ArgumentError, "Missing the required parameter 'mod_user' when calling ModApi.permit_mod_user"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/users'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(mod_user) 

      # return_type
      return_type = opts[:return_type] || 'GeneralError' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#permit_mod_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a specific mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Mod]
    def show_mod(mod_id, opts = {})
      data, _status_code, _headers = show_mod_with_http_info(mod_id, opts)
      data
    end

    # Fetch a specific mod
    # @param mod_id [String] A mod UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mod, Integer, Hash)>] Mod data, response status code and response headers
    def show_mod_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.show_mod ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.show_mod"
      end
      # resource path
      local_var_path = '/mods/{mod_id}'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Mod' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#show_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a specific version for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Version]
    def show_version(mod_id, version_id, opts = {})
      data, _status_code, _headers = show_version_with_http_info(mod_id, version_id, opts)
      data
    end

    # Fetch a specific version for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Version, Integer, Hash)>] Version data, response status code and response headers
    def show_version_with_http_info(mod_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.show_version ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.show_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.show_version"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}'.sub('{' + 'mod_id' + '}', mod_id.to_s).sub('{' + 'version_id' + '}', version_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Version' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#show_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod [Mod] The mod data to update
    # @param [Hash] opts the optional parameters
    # @return [Mod]
    def update_mod(mod_id, mod, opts = {})
      data, _status_code, _headers = update_mod_with_http_info(mod_id, mod, opts)
      data
    end

    # Update a specific mod
    # @param mod_id [String] A mod UUID or slug
    # @param mod [Mod] The mod data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mod, Integer, Hash)>] Mod data, response status code and response headers
    def update_mod_with_http_info(mod_id, mod, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.update_mod ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.update_mod"
      end
      # verify the required parameter 'mod' is set
      if @api_client.config.client_side_validation && mod.nil?
        fail ArgumentError, "Missing the required parameter 'mod' when calling ModApi.update_mod"
      end
      # resource path
      local_var_path = '/mods/{mod_id}'.sub('{' + 'mod_id' + '}', mod_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(mod) 

      # return_type
      return_type = opts[:return_type] || 'Mod' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#update_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific version for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param version [Version] The version data to update
    # @param [Hash] opts the optional parameters
    # @return [Version]
    def update_version(mod_id, version_id, version, opts = {})
      data, _status_code, _headers = update_version_with_http_info(mod_id, version_id, version, opts)
      data
    end

    # Update a specific version for a mod
    # @param mod_id [String] A mod UUID or slug
    # @param version_id [String] A version UUID or slug
    # @param version [Version] The version data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Version, Integer, Hash)>] Version data, response status code and response headers
    def update_version_with_http_info(mod_id, version_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.update_version ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        fail ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.update_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.update_version"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ModApi.update_version"
      end
      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}'.sub('{' + 'mod_id' + '}', mod_id.to_s).sub('{' + 'version_id' + '}', version_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(version) 

      # return_type
      return_type = opts[:return_type] || 'Version' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#update_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
