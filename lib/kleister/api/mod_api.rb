# Kleister OpenAPI
#
# API definition for Kleister, manage mod packs for Minecraft
#
# The version of the OpenAPI document: 1.0.0-alpha1
# Contact: kleister@webhippie.de
# Generated by: https://openapi-generator.tech
# Generator version: 7.6.0
#

require 'cgi'

module Kleister
  class ModApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Attach a team to mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_team_params [ModTeamParams] The team data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_mod_to_team(mod_id, mod_team_params, opts = {})
      data, _status_code, _headers = attach_mod_to_team_with_http_info(mod_id, mod_team_params, opts)
      data
    end

    # Attach a team to mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_team_params [ModTeamParams] The team data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_mod_to_team_with_http_info(mod_id, mod_team_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.attach_mod_to_team ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.attach_mod_to_team"
      end
      # verify the required parameter 'mod_team_params' is set
      if @api_client.config.client_side_validation && mod_team_params.nil?
        raise ArgumentError, "Missing the required parameter 'mod_team_params' when calling ModApi.attach_mod_to_team"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/teams'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mod_team_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.attach_mod_to_team',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#attach_mod_to_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Attach a user to mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_user_params [ModUserParams] The user data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_mod_to_user(mod_id, mod_user_params, opts = {})
      data, _status_code, _headers = attach_mod_to_user_with_http_info(mod_id, mod_user_params, opts)
      data
    end

    # Attach a user to mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_user_params [ModUserParams] The user data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_mod_to_user_with_http_info(mod_id, mod_user_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.attach_mod_to_user ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.attach_mod_to_user"
      end
      # verify the required parameter 'mod_user_params' is set
      if @api_client.config.client_side_validation && mod_user_params.nil?
        raise ArgumentError, "Missing the required parameter 'mod_user_params' when calling ModApi.attach_mod_to_user"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/users'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mod_user_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.attach_mod_to_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#attach_mod_to_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Attach a build to a version
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param version_build_params [VersionBuildParams] The version build data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_version_to_build(mod_id, version_id, version_build_params, opts = {})
      data, _status_code, _headers = attach_version_to_build_with_http_info(mod_id, version_id, version_build_params, opts)
      data
    end

    # Attach a build to a version
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param version_build_params [VersionBuildParams] The version build data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_version_to_build_with_http_info(mod_id, version_id, version_build_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.attach_version_to_build ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.attach_version_to_build"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        raise ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.attach_version_to_build"
      end
      # verify the required parameter 'version_build_params' is set
      if @api_client.config.client_side_validation && version_build_params.nil?
        raise ArgumentError, "Missing the required parameter 'version_build_params' when calling ModApi.attach_version_to_build"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}/builds'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(version_build_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.attach_version_to_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#attach_version_to_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create a new mod
    # @param mod [Mod] The mod data to create
    # @param [Hash] opts the optional parameters
    # @return [Mod]
    def create_mod(mod, opts = {})
      data, _status_code, _headers = create_mod_with_http_info(mod, opts)
      data
    end

    # Create a new mod
    # @param mod [Mod] The mod data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mod, Integer, Hash)>] Mod data, response status code and response headers
    def create_mod_with_http_info(mod, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.create_mod ...'
      end
      # verify the required parameter 'mod' is set
      if @api_client.config.client_side_validation && mod.nil?
        raise ArgumentError, "Missing the required parameter 'mod' when calling ModApi.create_mod"
      end

      # resource path
      local_var_path = '/mods'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mod)

      # return_type
      return_type = opts[:debug_return_type] || 'Mod'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.create_mod',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#create_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create a new version for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param version [Version] The version data to create
    # @param [Hash] opts the optional parameters
    # @return [Version]
    def create_version(mod_id, version, opts = {})
      data, _status_code, _headers = create_version_with_http_info(mod_id, version, opts)
      data
    end

    # Create a new version for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param version [Version] The version data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Version, Integer, Hash)>] Version data, response status code and response headers
    def create_version_with_http_info(mod_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.create_version ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.create_version"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        raise ArgumentError, "Missing the required parameter 'version' when calling ModApi.create_version"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/versions'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(version)

      # return_type
      return_type = opts[:debug_return_type] || 'Version'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.create_version',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#create_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete a specific mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_mod(mod_id, opts = {})
      data, _status_code, _headers = delete_mod_with_http_info(mod_id, opts)
      data
    end

    # Delete a specific mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_mod_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_mod ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_mod"
      end

      # resource path
      local_var_path = '/mods/{mod_id}'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.delete_mod',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a team from mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_team_params [ModTeamParams] The mod team data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_mod_from_team(mod_id, mod_team_params, opts = {})
      data, _status_code, _headers = delete_mod_from_team_with_http_info(mod_id, mod_team_params, opts)
      data
    end

    # Unlink a team from mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_team_params [ModTeamParams] The mod team data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_mod_from_team_with_http_info(mod_id, mod_team_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_mod_from_team ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_mod_from_team"
      end
      # verify the required parameter 'mod_team_params' is set
      if @api_client.config.client_side_validation && mod_team_params.nil?
        raise ArgumentError, "Missing the required parameter 'mod_team_params' when calling ModApi.delete_mod_from_team"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/teams'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mod_team_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.delete_mod_from_team',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_mod_from_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a user from mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_user_params [ModUserParams] The mod user data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_mod_from_user(mod_id, mod_user_params, opts = {})
      data, _status_code, _headers = delete_mod_from_user_with_http_info(mod_id, mod_user_params, opts)
      data
    end

    # Unlink a user from mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_user_params [ModUserParams] The mod user data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_mod_from_user_with_http_info(mod_id, mod_user_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_mod_from_user ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_mod_from_user"
      end
      # verify the required parameter 'mod_user_params' is set
      if @api_client.config.client_side_validation && mod_user_params.nil?
        raise ArgumentError, "Missing the required parameter 'mod_user_params' when calling ModApi.delete_mod_from_user"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/users'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mod_user_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.delete_mod_from_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_mod_from_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete a specific version for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_version(mod_id, version_id, opts = {})
      data, _status_code, _headers = delete_version_with_http_info(mod_id, version_id, opts)
      data
    end

    # Delete a specific version for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_version_with_http_info(mod_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_version ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        raise ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.delete_version"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.delete_version',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a build from a version
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param version_build_params [VersionBuildParams] The version build data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_version_from_build(mod_id, version_id, version_build_params, opts = {})
      data, _status_code, _headers = delete_version_from_build_with_http_info(mod_id, version_id, version_build_params, opts)
      data
    end

    # Unlink a build from a version
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param version_build_params [VersionBuildParams] The version build data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_version_from_build_with_http_info(mod_id, version_id, version_build_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.delete_version_from_build ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.delete_version_from_build"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        raise ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.delete_version_from_build"
      end
      # verify the required parameter 'version_build_params' is set
      if @api_client.config.client_side_validation && version_build_params.nil?
        raise ArgumentError, "Missing the required parameter 'version_build_params' when calling ModApi.delete_version_from_build"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}/builds'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(version_build_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.delete_version_from_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#delete_version_from_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all teams attached to mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [ModTeams]
    def list_mod_teams(mod_id, opts = {})
      data, _status_code, _headers = list_mod_teams_with_http_info(mod_id, opts)
      data
    end

    # Fetch all teams attached to mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(ModTeams, Integer, Hash)>] ModTeams data, response status code and response headers
    def list_mod_teams_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_mod_teams ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.list_mod_teams"
      end

      allowable_values = %w[slug name]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/teams'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModTeams'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.list_mod_teams',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_mod_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all users attached to mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'username')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [ModUsers]
    def list_mod_users(mod_id, opts = {})
      data, _status_code, _headers = list_mod_users_with_http_info(mod_id, opts)
      data
    end

    # Fetch all users attached to mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'username')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(ModUsers, Integer, Hash)>] ModUsers data, response status code and response headers
    def list_mod_users_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_mod_users ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.list_mod_users"
      end

      allowable_values = %w[username email fullname admin active]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/users'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModUsers'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.list_mod_users',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_mod_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all available mods
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Mods]
    def list_mods(opts = {})
      data, _status_code, _headers = list_mods_with_http_info(opts)
      data
    end

    # Fetch all available mods
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(Mods, Integer, Hash)>] Mods data, response status code and response headers
    def list_mods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_mods ...'
      end
      allowable_values = %w[slug name public]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/mods'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Mods'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.list_mods',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_mods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all builds attached to version
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [VersionBuilds]
    def list_version_builds(mod_id, version_id, opts = {})
      data, _status_code, _headers = list_version_builds_with_http_info(mod_id, version_id, opts)
      data
    end

    # Fetch all builds attached to version
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(VersionBuilds, Integer, Hash)>] VersionBuilds data, response status code and response headers
    def list_version_builds_with_http_info(mod_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_version_builds ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.list_version_builds"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        raise ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.list_version_builds"
      end

      allowable_values = %w[name public]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}/builds'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VersionBuilds'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.list_version_builds',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_version_builds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all available versions for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Versions]
    def list_versions(mod_id, opts = {})
      data, _status_code, _headers = list_versions_with_http_info(mod_id, opts)
      data
    end

    # Fetch all available versions for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(Versions, Integer, Hash)>] Versions data, response status code and response headers
    def list_versions_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.list_versions ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.list_versions"
      end

      allowable_values = %w[name public]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/versions'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Versions'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.list_versions',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#list_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update team perms for mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_team_params [ModTeamParams] The team data to update
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def permit_mod_team(mod_id, mod_team_params, opts = {})
      data, _status_code, _headers = permit_mod_team_with_http_info(mod_id, mod_team_params, opts)
      data
    end

    # Update team perms for mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_team_params [ModTeamParams] The team data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def permit_mod_team_with_http_info(mod_id, mod_team_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.permit_mod_team ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.permit_mod_team"
      end
      # verify the required parameter 'mod_team_params' is set
      if @api_client.config.client_side_validation && mod_team_params.nil?
        raise ArgumentError, "Missing the required parameter 'mod_team_params' when calling ModApi.permit_mod_team"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/teams'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mod_team_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.permit_mod_team',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#permit_mod_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update user perms for mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_user_params [ModUserParams] The user data to update
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def permit_mod_user(mod_id, mod_user_params, opts = {})
      data, _status_code, _headers = permit_mod_user_with_http_info(mod_id, mod_user_params, opts)
      data
    end

    # Update user perms for mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod_user_params [ModUserParams] The user data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def permit_mod_user_with_http_info(mod_id, mod_user_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.permit_mod_user ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.permit_mod_user"
      end
      # verify the required parameter 'mod_user_params' is set
      if @api_client.config.client_side_validation && mod_user_params.nil?
        raise ArgumentError, "Missing the required parameter 'mod_user_params' when calling ModApi.permit_mod_user"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/users'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mod_user_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.permit_mod_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#permit_mod_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch a specific mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Mod]
    def show_mod(mod_id, opts = {})
      data, _status_code, _headers = show_mod_with_http_info(mod_id, opts)
      data
    end

    # Fetch a specific mod
    # @param mod_id [String] A mod identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mod, Integer, Hash)>] Mod data, response status code and response headers
    def show_mod_with_http_info(mod_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.show_mod ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.show_mod"
      end

      # resource path
      local_var_path = '/mods/{mod_id}'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Mod'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.show_mod',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#show_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch a specific version for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Version]
    def show_version(mod_id, version_id, opts = {})
      data, _status_code, _headers = show_version_with_http_info(mod_id, version_id, opts)
      data
    end

    # Fetch a specific version for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Version, Integer, Hash)>] Version data, response status code and response headers
    def show_version_with_http_info(mod_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.show_version ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.show_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        raise ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.show_version"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Version'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.show_version',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#show_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update a specific mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod [Mod] The mod data to update
    # @param [Hash] opts the optional parameters
    # @return [Mod]
    def update_mod(mod_id, mod, opts = {})
      data, _status_code, _headers = update_mod_with_http_info(mod_id, mod, opts)
      data
    end

    # Update a specific mod
    # @param mod_id [String] A mod identifier or slug
    # @param mod [Mod] The mod data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mod, Integer, Hash)>] Mod data, response status code and response headers
    def update_mod_with_http_info(mod_id, mod, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.update_mod ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.update_mod"
      end
      # verify the required parameter 'mod' is set
      if @api_client.config.client_side_validation && mod.nil?
        raise ArgumentError, "Missing the required parameter 'mod' when calling ModApi.update_mod"
      end

      # resource path
      local_var_path = '/mods/{mod_id}'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mod)

      # return_type
      return_type = opts[:debug_return_type] || 'Mod'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.update_mod',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#update_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update a specific version for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param version [Version] The version data to update
    # @param [Hash] opts the optional parameters
    # @return [Version]
    def update_version(mod_id, version_id, version, opts = {})
      data, _status_code, _headers = update_version_with_http_info(mod_id, version_id, version, opts)
      data
    end

    # Update a specific version for a mod
    # @param mod_id [String] A mod identifier or slug
    # @param version_id [String] A version identifier or slug
    # @param version [Version] The version data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Version, Integer, Hash)>] Version data, response status code and response headers
    def update_version_with_http_info(mod_id, version_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModApi.update_version ...'
      end
      # verify the required parameter 'mod_id' is set
      if @api_client.config.client_side_validation && mod_id.nil?
        raise ArgumentError, "Missing the required parameter 'mod_id' when calling ModApi.update_version"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        raise ArgumentError, "Missing the required parameter 'version_id' when calling ModApi.update_version"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        raise ArgumentError, "Missing the required parameter 'version' when calling ModApi.update_version"
      end

      # resource path
      local_var_path = '/mods/{mod_id}/versions/{version_id}'.sub('{' + 'mod_id' + '}', CGI.escape(mod_id.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(version)

      # return_type
      return_type = opts[:debug_return_type] || 'Version'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ModApi.update_version',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModApi#update_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
