# Kleister OpenAPI
#
# API definition for Kleister, manage mod packs for Minecraft
#
# The version of the OpenAPI document: 1.0.0-alpha1
# Contact: kleister@webhippie.de
# Generated by: https://openapi-generator.tech
# Generator version: 7.6.0
#

require 'cgi'

module Kleister
  class PackApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Attach a version to a build
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param build_version_params [BuildVersionParams] The build version data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_build_to_version(pack_id, build_id, build_version_params, opts = {})
      data, _status_code, _headers = attach_build_to_version_with_http_info(pack_id, build_id, build_version_params, opts)
      data
    end

    # Attach a version to a build
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param build_version_params [BuildVersionParams] The build version data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_build_to_version_with_http_info(pack_id, build_id, build_version_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.attach_build_to_version ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.attach_build_to_version"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        raise ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.attach_build_to_version"
      end
      # verify the required parameter 'build_version_params' is set
      if @api_client.config.client_side_validation && build_version_params.nil?
        raise ArgumentError, "Missing the required parameter 'build_version_params' when calling PackApi.attach_build_to_version"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}/versions'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(build_version_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.attach_build_to_version',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#attach_build_to_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Attach a team to pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_team_params [PackTeamParams] The team data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_pack_to_team(pack_id, pack_team_params, opts = {})
      data, _status_code, _headers = attach_pack_to_team_with_http_info(pack_id, pack_team_params, opts)
      data
    end

    # Attach a team to pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_team_params [PackTeamParams] The team data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_pack_to_team_with_http_info(pack_id, pack_team_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.attach_pack_to_team ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.attach_pack_to_team"
      end
      # verify the required parameter 'pack_team_params' is set
      if @api_client.config.client_side_validation && pack_team_params.nil?
        raise ArgumentError, "Missing the required parameter 'pack_team_params' when calling PackApi.attach_pack_to_team"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/teams'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_team_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.attach_pack_to_team',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#attach_pack_to_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Attach a user to pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_user_params [PackUserParams] The user data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_pack_to_user(pack_id, pack_user_params, opts = {})
      data, _status_code, _headers = attach_pack_to_user_with_http_info(pack_id, pack_user_params, opts)
      data
    end

    # Attach a user to pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_user_params [PackUserParams] The user data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_pack_to_user_with_http_info(pack_id, pack_user_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.attach_pack_to_user ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.attach_pack_to_user"
      end
      # verify the required parameter 'pack_user_params' is set
      if @api_client.config.client_side_validation && pack_user_params.nil?
        raise ArgumentError, "Missing the required parameter 'pack_user_params' when calling PackApi.attach_pack_to_user"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/users'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_user_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.attach_pack_to_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#attach_pack_to_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create a new build for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param build [Build] The build data to create
    # @param [Hash] opts the optional parameters
    # @return [Build]
    def create_build(pack_id, build, opts = {})
      data, _status_code, _headers = create_build_with_http_info(pack_id, build, opts)
      data
    end

    # Create a new build for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param build [Build] The build data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Build, Integer, Hash)>] Build data, response status code and response headers
    def create_build_with_http_info(pack_id, build, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.create_build ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.create_build"
      end
      # verify the required parameter 'build' is set
      if @api_client.config.client_side_validation && build.nil?
        raise ArgumentError, "Missing the required parameter 'build' when calling PackApi.create_build"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/builds'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(build)

      # return_type
      return_type = opts[:debug_return_type] || 'Build'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.create_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#create_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create a new pack
    # @param pack [Pack] The pack data to create
    # @param [Hash] opts the optional parameters
    # @return [Pack]
    def create_pack(pack, opts = {})
      data, _status_code, _headers = create_pack_with_http_info(pack, opts)
      data
    end

    # Create a new pack
    # @param pack [Pack] The pack data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pack, Integer, Hash)>] Pack data, response status code and response headers
    def create_pack_with_http_info(pack, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.create_pack ...'
      end
      # verify the required parameter 'pack' is set
      if @api_client.config.client_side_validation && pack.nil?
        raise ArgumentError, "Missing the required parameter 'pack' when calling PackApi.create_pack"
      end

      # resource path
      local_var_path = '/packs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack)

      # return_type
      return_type = opts[:debug_return_type] || 'Pack'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.create_pack',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#create_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete a specific build for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_build(pack_id, build_id, opts = {})
      data, _status_code, _headers = delete_build_with_http_info(pack_id, build_id, opts)
      data
    end

    # Delete a specific build for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_build_with_http_info(pack_id, build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_build ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_build"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        raise ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.delete_build"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.delete_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a version from a build
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param build_version_params [BuildVersionParams] The build version data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_build_from_version(pack_id, build_id, build_version_params, opts = {})
      data, _status_code, _headers = delete_build_from_version_with_http_info(pack_id, build_id, build_version_params, opts)
      data
    end

    # Unlink a version from a build
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param build_version_params [BuildVersionParams] The build version data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_build_from_version_with_http_info(pack_id, build_id, build_version_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_build_from_version ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_build_from_version"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        raise ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.delete_build_from_version"
      end
      # verify the required parameter 'build_version_params' is set
      if @api_client.config.client_side_validation && build_version_params.nil?
        raise ArgumentError, "Missing the required parameter 'build_version_params' when calling PackApi.delete_build_from_version"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}/versions'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(build_version_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.delete_build_from_version',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_build_from_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete a specific pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_pack(pack_id, opts = {})
      data, _status_code, _headers = delete_pack_with_http_info(pack_id, opts)
      data
    end

    # Delete a specific pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_pack_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_pack ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_pack"
      end

      # resource path
      local_var_path = '/packs/{pack_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.delete_pack',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a team from pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_team_params [PackTeamParams] The pack team data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_pack_from_team(pack_id, pack_team_params, opts = {})
      data, _status_code, _headers = delete_pack_from_team_with_http_info(pack_id, pack_team_params, opts)
      data
    end

    # Unlink a team from pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_team_params [PackTeamParams] The pack team data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_pack_from_team_with_http_info(pack_id, pack_team_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_pack_from_team ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_pack_from_team"
      end
      # verify the required parameter 'pack_team_params' is set
      if @api_client.config.client_side_validation && pack_team_params.nil?
        raise ArgumentError, "Missing the required parameter 'pack_team_params' when calling PackApi.delete_pack_from_team"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/teams'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_team_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.delete_pack_from_team',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_pack_from_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a user from pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_user_params [PackUserParams] The pack user data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_pack_from_user(pack_id, pack_user_params, opts = {})
      data, _status_code, _headers = delete_pack_from_user_with_http_info(pack_id, pack_user_params, opts)
      data
    end

    # Unlink a user from pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_user_params [PackUserParams] The pack user data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_pack_from_user_with_http_info(pack_id, pack_user_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_pack_from_user ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_pack_from_user"
      end
      # verify the required parameter 'pack_user_params' is set
      if @api_client.config.client_side_validation && pack_user_params.nil?
        raise ArgumentError, "Missing the required parameter 'pack_user_params' when calling PackApi.delete_pack_from_user"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/users'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_user_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.delete_pack_from_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_pack_from_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all versions attached to build
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [UserTeams]
    def list_build_versions(pack_id, build_id, opts = {})
      data, _status_code, _headers = list_build_versions_with_http_info(pack_id, build_id, opts)
      data
    end

    # Fetch all versions attached to build
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [Array<(UserTeams, Integer, Hash)>] UserTeams data, response status code and response headers
    def list_build_versions_with_http_info(pack_id, build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_build_versions ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.list_build_versions"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        raise ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.list_build_versions"
      end

      allowable_values = %w[slug name]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}/versions'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserTeams'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.list_build_versions',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_build_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all available builds for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [Builds]
    def list_builds(pack_id, opts = {})
      data, _status_code, _headers = list_builds_with_http_info(pack_id, opts)
      data
    end

    # Fetch all available builds for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [Array<(Builds, Integer, Hash)>] Builds data, response status code and response headers
    def list_builds_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_builds ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.list_builds"
      end

      allowable_values = %w[slug name]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/builds'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Builds'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.list_builds',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_builds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all teams attached to pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [PackTeams]
    def list_pack_teams(pack_id, opts = {})
      data, _status_code, _headers = list_pack_teams_with_http_info(pack_id, opts)
      data
    end

    # Fetch all teams attached to pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(PackTeams, Integer, Hash)>] PackTeams data, response status code and response headers
    def list_pack_teams_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_pack_teams ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.list_pack_teams"
      end

      allowable_values = %w[slug name]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/teams'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PackTeams'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.list_pack_teams',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_pack_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all users attached to pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'username')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [PackUsers]
    def list_pack_users(pack_id, opts = {})
      data, _status_code, _headers = list_pack_users_with_http_info(pack_id, opts)
      data
    end

    # Fetch all users attached to pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'username')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(PackUsers, Integer, Hash)>] PackUsers data, response status code and response headers
    def list_pack_users_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_pack_users ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.list_pack_users"
      end

      allowable_values = %w[username email fullname admin active]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/users'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PackUsers'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.list_pack_users',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_pack_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all available packs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Packs]
    def list_packs(opts = {})
      data, _status_code, _headers = list_packs_with_http_info(opts)
      data
    end

    # Fetch all available packs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(Packs, Integer, Hash)>] Packs data, response status code and response headers
    def list_packs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_packs ...'
      end
      allowable_values = %w[name public]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/packs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Packs'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.list_packs',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_packs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update team perms for pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_team_params [PackTeamParams] The team data to update
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def permit_pack_team(pack_id, pack_team_params, opts = {})
      data, _status_code, _headers = permit_pack_team_with_http_info(pack_id, pack_team_params, opts)
      data
    end

    # Update team perms for pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_team_params [PackTeamParams] The team data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def permit_pack_team_with_http_info(pack_id, pack_team_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.permit_pack_team ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.permit_pack_team"
      end
      # verify the required parameter 'pack_team_params' is set
      if @api_client.config.client_side_validation && pack_team_params.nil?
        raise ArgumentError, "Missing the required parameter 'pack_team_params' when calling PackApi.permit_pack_team"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/teams'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_team_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.permit_pack_team',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#permit_pack_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update user perms for pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_user_params [PackUserParams] The user data to update
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def permit_pack_user(pack_id, pack_user_params, opts = {})
      data, _status_code, _headers = permit_pack_user_with_http_info(pack_id, pack_user_params, opts)
      data
    end

    # Update user perms for pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack_user_params [PackUserParams] The user data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def permit_pack_user_with_http_info(pack_id, pack_user_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.permit_pack_user ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.permit_pack_user"
      end
      # verify the required parameter 'pack_user_params' is set
      if @api_client.config.client_side_validation && pack_user_params.nil?
        raise ArgumentError, "Missing the required parameter 'pack_user_params' when calling PackApi.permit_pack_user"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/users'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_user_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.permit_pack_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#permit_pack_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch a specific build for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Build]
    def show_build(pack_id, build_id, opts = {})
      data, _status_code, _headers = show_build_with_http_info(pack_id, build_id, opts)
      data
    end

    # Fetch a specific build for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Build, Integer, Hash)>] Build data, response status code and response headers
    def show_build_with_http_info(pack_id, build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.show_build ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.show_build"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        raise ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.show_build"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Build'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.show_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#show_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch a specific pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Pack]
    def show_pack(pack_id, opts = {})
      data, _status_code, _headers = show_pack_with_http_info(pack_id, opts)
      data
    end

    # Fetch a specific pack
    # @param pack_id [String] A pack identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pack, Integer, Hash)>] Pack data, response status code and response headers
    def show_pack_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.show_pack ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.show_pack"
      end

      # resource path
      local_var_path = '/packs/{pack_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Pack'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.show_pack',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#show_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update a specific build for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param build [Build] The build data to update
    # @param [Hash] opts the optional parameters
    # @return [Build]
    def update_build(pack_id, build_id, build, opts = {})
      data, _status_code, _headers = update_build_with_http_info(pack_id, build_id, build, opts)
      data
    end

    # Update a specific build for a pack
    # @param pack_id [String] A pack identifier or slug
    # @param build_id [String] A build identifier or slug
    # @param build [Build] The build data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Build, Integer, Hash)>] Build data, response status code and response headers
    def update_build_with_http_info(pack_id, build_id, build, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.update_build ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.update_build"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        raise ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.update_build"
      end
      # verify the required parameter 'build' is set
      if @api_client.config.client_side_validation && build.nil?
        raise ArgumentError, "Missing the required parameter 'build' when calling PackApi.update_build"
      end

      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(build)

      # return_type
      return_type = opts[:debug_return_type] || 'Build'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.update_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#update_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update a specific pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack [Pack] The pack data to update
    # @param [Hash] opts the optional parameters
    # @return [Pack]
    def update_pack(pack_id, pack, opts = {})
      data, _status_code, _headers = update_pack_with_http_info(pack_id, pack, opts)
      data
    end

    # Update a specific pack
    # @param pack_id [String] A pack identifier or slug
    # @param pack [Pack] The pack data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pack, Integer, Hash)>] Pack data, response status code and response headers
    def update_pack_with_http_info(pack_id, pack, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.update_pack ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        raise ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.update_pack"
      end
      # verify the required parameter 'pack' is set
      if @api_client.config.client_side_validation && pack.nil?
        raise ArgumentError, "Missing the required parameter 'pack' when calling PackApi.update_pack"
      end

      # resource path
      local_var_path = '/packs/{pack_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack)

      # return_type
      return_type = opts[:debug_return_type] || 'Pack'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'PackApi.update_pack',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#update_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
