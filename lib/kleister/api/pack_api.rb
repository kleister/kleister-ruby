=begin
#Kleister OpenAPI

#API definition for Kleister, manage mod packs for Minecraft

The version of the OpenAPI document: 1.0.0-alpha1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0

=end

require 'cgi'

module Kleister
  class PackApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign a version to a build
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param build_version [BuildVersionParams] The version data to append to build
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def append_build_to_version(pack_id, build_id, build_version, opts = {})
      data, _status_code, _headers = append_build_to_version_with_http_info(pack_id, build_id, build_version, opts)
      data
    end

    # Assign a version to a build
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param build_version [BuildVersionParams] The version data to append to build
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def append_build_to_version_with_http_info(pack_id, build_id, build_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.append_build_to_version ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.append_build_to_version"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.append_build_to_version"
      end
      # verify the required parameter 'build_version' is set
      if @api_client.config.client_side_validation && build_version.nil?
        fail ArgumentError, "Missing the required parameter 'build_version' when calling PackApi.append_build_to_version"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}/versions'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(build_version)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.append_build_to_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#append_build_to_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign a team to pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_team [PackTeamParams] The pack team data to assign
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def append_pack_to_team(pack_id, pack_team, opts = {})
      data, _status_code, _headers = append_pack_to_team_with_http_info(pack_id, pack_team, opts)
      data
    end

    # Assign a team to pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_team [PackTeamParams] The pack team data to assign
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def append_pack_to_team_with_http_info(pack_id, pack_team, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.append_pack_to_team ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.append_pack_to_team"
      end
      # verify the required parameter 'pack_team' is set
      if @api_client.config.client_side_validation && pack_team.nil?
        fail ArgumentError, "Missing the required parameter 'pack_team' when calling PackApi.append_pack_to_team"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/teams'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_team)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.append_pack_to_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#append_pack_to_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign a user to pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_user [PackUserParams] The pack user data to assign
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def append_pack_to_user(pack_id, pack_user, opts = {})
      data, _status_code, _headers = append_pack_to_user_with_http_info(pack_id, pack_user, opts)
      data
    end

    # Assign a user to pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_user [PackUserParams] The pack user data to assign
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def append_pack_to_user_with_http_info(pack_id, pack_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.append_pack_to_user ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.append_pack_to_user"
      end
      # verify the required parameter 'pack_user' is set
      if @api_client.config.client_side_validation && pack_user.nil?
        fail ArgumentError, "Missing the required parameter 'pack_user' when calling PackApi.append_pack_to_user"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/users'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_user)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.append_pack_to_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#append_pack_to_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new build for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param build [Build] The build data to create
    # @param [Hash] opts the optional parameters
    # @return [Build]
    def create_build(pack_id, build, opts = {})
      data, _status_code, _headers = create_build_with_http_info(pack_id, build, opts)
      data
    end

    # Create a new build for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param build [Build] The build data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Build, Integer, Hash)>] Build data, response status code and response headers
    def create_build_with_http_info(pack_id, build, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.create_build ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.create_build"
      end
      # verify the required parameter 'build' is set
      if @api_client.config.client_side_validation && build.nil?
        fail ArgumentError, "Missing the required parameter 'build' when calling PackApi.create_build"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/builds'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(build)

      # return_type
      return_type = opts[:debug_return_type] || 'Build'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.create_build",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#create_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new pack
    # @param pack [Pack] The pack data to create
    # @param [Hash] opts the optional parameters
    # @return [Pack]
    def create_pack(pack, opts = {})
      data, _status_code, _headers = create_pack_with_http_info(pack, opts)
      data
    end

    # Create a new pack
    # @param pack [Pack] The pack data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pack, Integer, Hash)>] Pack data, response status code and response headers
    def create_pack_with_http_info(pack, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.create_pack ...'
      end
      # verify the required parameter 'pack' is set
      if @api_client.config.client_side_validation && pack.nil?
        fail ArgumentError, "Missing the required parameter 'pack' when calling PackApi.create_pack"
      end
      # resource path
      local_var_path = '/packs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack)

      # return_type
      return_type = opts[:debug_return_type] || 'Pack'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.create_pack",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#create_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific build for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_build(pack_id, build_id, opts = {})
      data, _status_code, _headers = delete_build_with_http_info(pack_id, build_id, opts)
      data
    end

    # Delete a specific build for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_build_with_http_info(pack_id, build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_build ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_build"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.delete_build"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.delete_build",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlink a version from a build
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param build_version [BuildVersionParams] The version data to unlink from build
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_build_from_version(pack_id, build_id, build_version, opts = {})
      data, _status_code, _headers = delete_build_from_version_with_http_info(pack_id, build_id, build_version, opts)
      data
    end

    # Unlink a version from a build
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param build_version [BuildVersionParams] The version data to unlink from build
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_build_from_version_with_http_info(pack_id, build_id, build_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_build_from_version ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_build_from_version"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.delete_build_from_version"
      end
      # verify the required parameter 'build_version' is set
      if @api_client.config.client_side_validation && build_version.nil?
        fail ArgumentError, "Missing the required parameter 'build_version' when calling PackApi.delete_build_from_version"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}/versions'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(build_version)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.delete_build_from_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_build_from_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_pack(pack_id, opts = {})
      data, _status_code, _headers = delete_pack_with_http_info(pack_id, opts)
      data
    end

    # Delete a specific pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_pack_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_pack ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_pack"
      end
      # resource path
      local_var_path = '/packs/{pack_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.delete_pack",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a team from pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_team [PackTeamParams] The pack team data to delete
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_pack_from_team(pack_id, pack_team, opts = {})
      data, _status_code, _headers = delete_pack_from_team_with_http_info(pack_id, pack_team, opts)
      data
    end

    # Remove a team from pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_team [PackTeamParams] The pack team data to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_pack_from_team_with_http_info(pack_id, pack_team, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_pack_from_team ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_pack_from_team"
      end
      # verify the required parameter 'pack_team' is set
      if @api_client.config.client_side_validation && pack_team.nil?
        fail ArgumentError, "Missing the required parameter 'pack_team' when calling PackApi.delete_pack_from_team"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/teams'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_team)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.delete_pack_from_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_pack_from_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_user [PackUserParams] The pack user data to delete
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def delete_pack_from_user(pack_id, pack_user, opts = {})
      data, _status_code, _headers = delete_pack_from_user_with_http_info(pack_id, pack_user, opts)
      data
    end

    # Remove a user from pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_user [PackUserParams] The pack user data to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def delete_pack_from_user_with_http_info(pack_id, pack_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.delete_pack_from_user ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.delete_pack_from_user"
      end
      # verify the required parameter 'pack_user' is set
      if @api_client.config.client_side_validation && pack_user.nil?
        fail ArgumentError, "Missing the required parameter 'pack_user' when calling PackApi.delete_pack_from_user"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/users'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_user)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.delete_pack_from_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#delete_pack_from_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all versions assigned to build
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<BuildVersion>]
    def list_build_versions(pack_id, build_id, opts = {})
      data, _status_code, _headers = list_build_versions_with_http_info(pack_id, build_id, opts)
      data
    end

    # Fetch all versions assigned to build
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BuildVersion>, Integer, Hash)>] Array<BuildVersion> data, response status code and response headers
    def list_build_versions_with_http_info(pack_id, build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_build_versions ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.list_build_versions"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.list_build_versions"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}/versions'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BuildVersion>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.list_build_versions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_build_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all available builds for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<Build>]
    def list_builds(pack_id, opts = {})
      data, _status_code, _headers = list_builds_with_http_info(pack_id, opts)
      data
    end

    # Fetch all available builds for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Build>, Integer, Hash)>] Array<Build> data, response status code and response headers
    def list_builds_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_builds ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.list_builds"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/builds'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Build>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.list_builds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_builds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all teams assigned to pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<TeamPack>]
    def list_pack_teams(pack_id, opts = {})
      data, _status_code, _headers = list_pack_teams_with_http_info(pack_id, opts)
      data
    end

    # Fetch all teams assigned to pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TeamPack>, Integer, Hash)>] Array<TeamPack> data, response status code and response headers
    def list_pack_teams_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_pack_teams ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.list_pack_teams"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/teams'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TeamPack>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.list_pack_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_pack_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all users assigned to pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<UserPack>]
    def list_pack_users(pack_id, opts = {})
      data, _status_code, _headers = list_pack_users_with_http_info(pack_id, opts)
      data
    end

    # Fetch all users assigned to pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserPack>, Integer, Hash)>] Array<UserPack> data, response status code and response headers
    def list_pack_users_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_pack_users ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.list_pack_users"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/users'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserPack>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.list_pack_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_pack_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch all available packs
    # @param [Hash] opts the optional parameters
    # @return [Array<Pack>]
    def list_packs(opts = {})
      data, _status_code, _headers = list_packs_with_http_info(opts)
      data
    end

    # Fetch all available packs
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Pack>, Integer, Hash)>] Array<Pack> data, response status code and response headers
    def list_packs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.list_packs ...'
      end
      # resource path
      local_var_path = '/packs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Pack>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.list_packs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#list_packs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update team perms for pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_team [PackTeamParams] The pack team data to update
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def permit_pack_team(pack_id, pack_team, opts = {})
      data, _status_code, _headers = permit_pack_team_with_http_info(pack_id, pack_team, opts)
      data
    end

    # Update team perms for pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_team [PackTeamParams] The pack team data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def permit_pack_team_with_http_info(pack_id, pack_team, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.permit_pack_team ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.permit_pack_team"
      end
      # verify the required parameter 'pack_team' is set
      if @api_client.config.client_side_validation && pack_team.nil?
        fail ArgumentError, "Missing the required parameter 'pack_team' when calling PackApi.permit_pack_team"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/teams'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_team)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.permit_pack_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#permit_pack_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user perms for pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_user [PackUserParams] The pack user data to update
    # @param [Hash] opts the optional parameters
    # @return [GeneralError]
    def permit_pack_user(pack_id, pack_user, opts = {})
      data, _status_code, _headers = permit_pack_user_with_http_info(pack_id, pack_user, opts)
      data
    end

    # Update user perms for pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack_user [PackUserParams] The pack user data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralError, Integer, Hash)>] GeneralError data, response status code and response headers
    def permit_pack_user_with_http_info(pack_id, pack_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.permit_pack_user ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.permit_pack_user"
      end
      # verify the required parameter 'pack_user' is set
      if @api_client.config.client_side_validation && pack_user.nil?
        fail ArgumentError, "Missing the required parameter 'pack_user' when calling PackApi.permit_pack_user"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/users'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack_user)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralError'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.permit_pack_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#permit_pack_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a specific build for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Build]
    def show_build(pack_id, build_id, opts = {})
      data, _status_code, _headers = show_build_with_http_info(pack_id, build_id, opts)
      data
    end

    # Fetch a specific build for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Build, Integer, Hash)>] Build data, response status code and response headers
    def show_build_with_http_info(pack_id, build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.show_build ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.show_build"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.show_build"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Build'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.show_build",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#show_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a specific pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Pack]
    def show_pack(pack_id, opts = {})
      data, _status_code, _headers = show_pack_with_http_info(pack_id, opts)
      data
    end

    # Fetch a specific pack
    # @param pack_id [String] A pack UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pack, Integer, Hash)>] Pack data, response status code and response headers
    def show_pack_with_http_info(pack_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.show_pack ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.show_pack"
      end
      # resource path
      local_var_path = '/packs/{pack_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Pack'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.show_pack",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#show_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific build for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param build [Build] The build data to update
    # @param [Hash] opts the optional parameters
    # @return [Build]
    def update_build(pack_id, build_id, build, opts = {})
      data, _status_code, _headers = update_build_with_http_info(pack_id, build_id, build, opts)
      data
    end

    # Update a specific build for a pack
    # @param pack_id [String] A pack UUID or slug
    # @param build_id [String] A build UUID or slug
    # @param build [Build] The build data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Build, Integer, Hash)>] Build data, response status code and response headers
    def update_build_with_http_info(pack_id, build_id, build, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.update_build ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.update_build"
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling PackApi.update_build"
      end
      # verify the required parameter 'build' is set
      if @api_client.config.client_side_validation && build.nil?
        fail ArgumentError, "Missing the required parameter 'build' when calling PackApi.update_build"
      end
      # resource path
      local_var_path = '/packs/{pack_id}/builds/{build_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s)).sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(build)

      # return_type
      return_type = opts[:debug_return_type] || 'Build'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.update_build",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#update_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack [Pack] The pack data to update
    # @param [Hash] opts the optional parameters
    # @return [Pack]
    def update_pack(pack_id, pack, opts = {})
      data, _status_code, _headers = update_pack_with_http_info(pack_id, pack, opts)
      data
    end

    # Update a specific pack
    # @param pack_id [String] A pack UUID or slug
    # @param pack [Pack] The pack data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pack, Integer, Hash)>] Pack data, response status code and response headers
    def update_pack_with_http_info(pack_id, pack, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackApi.update_pack ...'
      end
      # verify the required parameter 'pack_id' is set
      if @api_client.config.client_side_validation && pack_id.nil?
        fail ArgumentError, "Missing the required parameter 'pack_id' when calling PackApi.update_pack"
      end
      # verify the required parameter 'pack' is set
      if @api_client.config.client_side_validation && pack.nil?
        fail ArgumentError, "Missing the required parameter 'pack' when calling PackApi.update_pack"
      end
      # resource path
      local_var_path = '/packs/{pack_id}'.sub('{' + 'pack_id' + '}', CGI.escape(pack_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pack)

      # return_type
      return_type = opts[:debug_return_type] || 'Pack'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PackApi.update_pack",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackApi#update_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
