# Kleister OpenAPI
#
# API definition for Kleister, manage mod packs for Minecraft
#
# The version of the OpenAPI document: 1.0.0-alpha1
# Contact: kleister@webhippie.de
# Generated by: https://openapi-generator.tech
# Generator version: 7.6.0
#

require 'cgi'

module Kleister
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Attach a mod to user
    # @param user_id [String] A user identifier or slug
    # @param user_mod_params [UserModParams] The user mod data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_user_to_mod(user_id, user_mod_params, opts = {})
      data, _status_code, _headers = attach_user_to_mod_with_http_info(user_id, user_mod_params, opts)
      data
    end

    # Attach a mod to user
    # @param user_id [String] A user identifier or slug
    # @param user_mod_params [UserModParams] The user mod data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_user_to_mod_with_http_info(user_id, user_mod_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.attach_user_to_mod ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.attach_user_to_mod"
      end
      # verify the required parameter 'user_mod_params' is set
      if @api_client.config.client_side_validation && user_mod_params.nil?
        raise ArgumentError, "Missing the required parameter 'user_mod_params' when calling UserApi.attach_user_to_mod"
      end

      # resource path
      local_var_path = '/users/{user_id}/mods'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_mod_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.attach_user_to_mod',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#attach_user_to_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Attach a pack to user
    # @param user_id [String] A user identifier or slug
    # @param user_pack_params [UserPackParams] The user pack data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_user_to_pack(user_id, user_pack_params, opts = {})
      data, _status_code, _headers = attach_user_to_pack_with_http_info(user_id, user_pack_params, opts)
      data
    end

    # Attach a pack to user
    # @param user_id [String] A user identifier or slug
    # @param user_pack_params [UserPackParams] The user pack data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_user_to_pack_with_http_info(user_id, user_pack_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.attach_user_to_pack ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.attach_user_to_pack"
      end
      # verify the required parameter 'user_pack_params' is set
      if @api_client.config.client_side_validation && user_pack_params.nil?
        raise ArgumentError, "Missing the required parameter 'user_pack_params' when calling UserApi.attach_user_to_pack"
      end

      # resource path
      local_var_path = '/users/{user_id}/packs'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_pack_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.attach_user_to_pack',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#attach_user_to_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Attach a team to user
    # @param user_id [String] A user identifier or slug
    # @param user_team_params [UserTeamParams] The user team data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_user_to_team(user_id, user_team_params, opts = {})
      data, _status_code, _headers = attach_user_to_team_with_http_info(user_id, user_team_params, opts)
      data
    end

    # Attach a team to user
    # @param user_id [String] A user identifier or slug
    # @param user_team_params [UserTeamParams] The user team data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_user_to_team_with_http_info(user_id, user_team_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.attach_user_to_team ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.attach_user_to_team"
      end
      # verify the required parameter 'user_team_params' is set
      if @api_client.config.client_side_validation && user_team_params.nil?
        raise ArgumentError, "Missing the required parameter 'user_team_params' when calling UserApi.attach_user_to_team"
      end

      # resource path
      local_var_path = '/users/{user_id}/teams'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_team_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.attach_user_to_team',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#attach_user_to_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create a new user
    # @param user [User] The user data to create
    # @param [Hash] opts the optional parameters
    # @return [User]
    def create_user(user, opts = {})
      data, _status_code, _headers = create_user_with_http_info(user, opts)
      data
    end

    # Create a new user
    # @param user [User] The user data to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def create_user_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.create_user ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        raise ArgumentError, "Missing the required parameter 'user' when calling UserApi.create_user"
      end

      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.create_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete a specific user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_user(user_id, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(user_id, opts)
      data
    end

    # Delete a specific user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.delete_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.delete_user"
      end

      # resource path
      local_var_path = '/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.delete_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a mod from user
    # @param user_id [String] A user identifier or slug
    # @param user_mod_params [UserModParams] The user mod data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_user_from_mod(user_id, user_mod_params, opts = {})
      data, _status_code, _headers = delete_user_from_mod_with_http_info(user_id, user_mod_params, opts)
      data
    end

    # Unlink a mod from user
    # @param user_id [String] A user identifier or slug
    # @param user_mod_params [UserModParams] The user mod data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_user_from_mod_with_http_info(user_id, user_mod_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.delete_user_from_mod ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.delete_user_from_mod"
      end
      # verify the required parameter 'user_mod_params' is set
      if @api_client.config.client_side_validation && user_mod_params.nil?
        raise ArgumentError, "Missing the required parameter 'user_mod_params' when calling UserApi.delete_user_from_mod"
      end

      # resource path
      local_var_path = '/users/{user_id}/mods'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_mod_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.delete_user_from_mod',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#delete_user_from_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a pack from user
    # @param user_id [String] A user identifier or slug
    # @param user_pack_params [UserPackParams] The user pack data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_user_from_pack(user_id, user_pack_params, opts = {})
      data, _status_code, _headers = delete_user_from_pack_with_http_info(user_id, user_pack_params, opts)
      data
    end

    # Unlink a pack from user
    # @param user_id [String] A user identifier or slug
    # @param user_pack_params [UserPackParams] The user pack data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_user_from_pack_with_http_info(user_id, user_pack_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.delete_user_from_pack ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.delete_user_from_pack"
      end
      # verify the required parameter 'user_pack_params' is set
      if @api_client.config.client_side_validation && user_pack_params.nil?
        raise ArgumentError, "Missing the required parameter 'user_pack_params' when calling UserApi.delete_user_from_pack"
      end

      # resource path
      local_var_path = '/users/{user_id}/packs'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_pack_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.delete_user_from_pack',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#delete_user_from_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a team from user
    # @param user_id [String] A user identifier or slug
    # @param user_team_params [UserTeamParams] The user team data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_user_from_team(user_id, user_team_params, opts = {})
      data, _status_code, _headers = delete_user_from_team_with_http_info(user_id, user_team_params, opts)
      data
    end

    # Unlink a team from user
    # @param user_id [String] A user identifier or slug
    # @param user_team_params [UserTeamParams] The user team data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_user_from_team_with_http_info(user_id, user_team_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.delete_user_from_team ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.delete_user_from_team"
      end
      # verify the required parameter 'user_team_params' is set
      if @api_client.config.client_side_validation && user_team_params.nil?
        raise ArgumentError, "Missing the required parameter 'user_team_params' when calling UserApi.delete_user_from_team"
      end

      # resource path
      local_var_path = '/users/{user_id}/teams'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_team_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.delete_user_from_team',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#delete_user_from_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all mods attached to user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [UserMods]
    def list_user_mods(user_id, opts = {})
      data, _status_code, _headers = list_user_mods_with_http_info(user_id, opts)
      data
    end

    # Fetch all mods attached to user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [Array<(UserMods, Integer, Hash)>] UserMods data, response status code and response headers
    def list_user_mods_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.list_user_mods ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.list_user_mods"
      end

      allowable_values = %w[slug name]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/users/{user_id}/mods'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserMods'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.list_user_mods',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#list_user_mods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all packs attached to user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [UserPacks]
    def list_user_packs(user_id, opts = {})
      data, _status_code, _headers = list_user_packs_with_http_info(user_id, opts)
      data
    end

    # Fetch all packs attached to user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [Array<(UserPacks, Integer, Hash)>] UserPacks data, response status code and response headers
    def list_user_packs_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.list_user_packs ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.list_user_packs"
      end

      allowable_values = %w[slug name]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/users/{user_id}/packs'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserPacks'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.list_user_packs',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#list_user_packs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all teams attached to user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [UserTeams]
    def list_user_teams(user_id, opts = {})
      data, _status_code, _headers = list_user_teams_with_http_info(user_id, opts)
      data
    end

    # Fetch all teams attached to user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit
    # @option opts [Integer] :offset Paging offset
    # @return [Array<(UserTeams, Integer, Hash)>] UserTeams data, response status code and response headers
    def list_user_teams_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.list_user_teams ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.list_user_teams"
      end

      allowable_values = %w[slug name]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/users/{user_id}/teams'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserTeams'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.list_user_teams',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#list_user_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch all available users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'username')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Users]
    def list_users(opts = {})
      data, _status_code, _headers = list_users_with_http_info(opts)
      data
    end

    # Fetch all available users
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'username')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(Users, Integer, Hash)>] Users data, response status code and response headers
    def list_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.list_users ...'
      end
      allowable_values = %w[username email fullname admin active]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Users'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.list_users',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#list_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update mod perms for user
    # @param user_id [String] A user identifier or slug
    # @param user_mod_params [UserModParams] The user mod data to update
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def permit_user_mod(user_id, user_mod_params, opts = {})
      data, _status_code, _headers = permit_user_mod_with_http_info(user_id, user_mod_params, opts)
      data
    end

    # Update mod perms for user
    # @param user_id [String] A user identifier or slug
    # @param user_mod_params [UserModParams] The user mod data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def permit_user_mod_with_http_info(user_id, user_mod_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.permit_user_mod ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.permit_user_mod"
      end
      # verify the required parameter 'user_mod_params' is set
      if @api_client.config.client_side_validation && user_mod_params.nil?
        raise ArgumentError, "Missing the required parameter 'user_mod_params' when calling UserApi.permit_user_mod"
      end

      # resource path
      local_var_path = '/users/{user_id}/mods'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_mod_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.permit_user_mod',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#permit_user_mod\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update pack perms for user
    # @param user_id [String] A user identifier or slug
    # @param user_pack_params [UserPackParams] The user pack data to update
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def permit_user_pack(user_id, user_pack_params, opts = {})
      data, _status_code, _headers = permit_user_pack_with_http_info(user_id, user_pack_params, opts)
      data
    end

    # Update pack perms for user
    # @param user_id [String] A user identifier or slug
    # @param user_pack_params [UserPackParams] The user pack data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def permit_user_pack_with_http_info(user_id, user_pack_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.permit_user_pack ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.permit_user_pack"
      end
      # verify the required parameter 'user_pack_params' is set
      if @api_client.config.client_side_validation && user_pack_params.nil?
        raise ArgumentError, "Missing the required parameter 'user_pack_params' when calling UserApi.permit_user_pack"
      end

      # resource path
      local_var_path = '/users/{user_id}/packs'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_pack_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.permit_user_pack',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#permit_user_pack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update team perms for user
    # @param user_id [String] A user identifier or slug
    # @param user_team_params [UserTeamParams] The user team data to update
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def permit_user_team(user_id, user_team_params, opts = {})
      data, _status_code, _headers = permit_user_team_with_http_info(user_id, user_team_params, opts)
      data
    end

    # Update team perms for user
    # @param user_id [String] A user identifier or slug
    # @param user_team_params [UserTeamParams] The user team data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def permit_user_team_with_http_info(user_id, user_team_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.permit_user_team ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.permit_user_team"
      end
      # verify the required parameter 'user_team_params' is set
      if @api_client.config.client_side_validation && user_team_params.nil?
        raise ArgumentError, "Missing the required parameter 'user_team_params' when calling UserApi.permit_user_team"
      end

      # resource path
      local_var_path = '/users/{user_id}/teams'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_team_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.permit_user_team',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#permit_user_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch a specific user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [User]
    def show_user(user_id, opts = {})
      data, _status_code, _headers = show_user_with_http_info(user_id, opts)
      data
    end

    # Fetch a specific user
    # @param user_id [String] A user identifier or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def show_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.show_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.show_user"
      end

      # resource path
      local_var_path = '/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.show_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#show_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update a specific user
    # @param user_id [String] A user identifier or slug
    # @param user [User] The user data to update
    # @param [Hash] opts the optional parameters
    # @return [User]
    def update_user(user_id, user, opts = {})
      data, _status_code, _headers = update_user_with_http_info(user_id, user, opts)
      data
    end

    # Update a specific user
    # @param user_id [String] A user identifier or slug
    # @param user [User] The user data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def update_user_with_http_info(user_id, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.update_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UserApi.update_user"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        raise ArgumentError, "Missing the required parameter 'user' when calling UserApi.update_user"
      end

      # resource path
      local_var_path = '/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'UserApi.update_user',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
