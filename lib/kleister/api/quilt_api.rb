# Kleister OpenAPI
#
# API definition for Kleister, manage mod packs for Minecraft
#
# The version of the OpenAPI document: 1.0.0-alpha1
# Contact: kleister@webhippie.de
# Generated by: https://openapi-generator.tech
# Generator version: 7.6.0
#

require 'cgi'

module Kleister
  class QuiltApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Attach a build to a Quilt version
    # @param quilt_id [String] A quilt identifier or slug
    # @param quilt_build_params [QuiltBuildParams] The build data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_quilt_to_build(quilt_id, quilt_build_params, opts = {})
      data, _status_code, _headers = attach_quilt_to_build_with_http_info(quilt_id, quilt_build_params, opts)
      data
    end

    # Attach a build to a Quilt version
    # @param quilt_id [String] A quilt identifier or slug
    # @param quilt_build_params [QuiltBuildParams] The build data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_quilt_to_build_with_http_info(quilt_id, quilt_build_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuiltApi.attach_quilt_to_build ...'
      end
      # verify the required parameter 'quilt_id' is set
      if @api_client.config.client_side_validation && quilt_id.nil?
        raise ArgumentError, "Missing the required parameter 'quilt_id' when calling QuiltApi.attach_quilt_to_build"
      end
      # verify the required parameter 'quilt_build_params' is set
      if @api_client.config.client_side_validation && quilt_build_params.nil?
        raise ArgumentError, "Missing the required parameter 'quilt_build_params' when calling QuiltApi.attach_quilt_to_build"
      end

      # resource path
      local_var_path = '/quilt/{quilt_id}/builds'.sub('{' + 'quilt_id' + '}', CGI.escape(quilt_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(quilt_build_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'QuiltApi.attach_quilt_to_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuiltApi#attach_quilt_to_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a build from a Quilt version
    # @param quilt_id [String] A quilt identifier or slug
    # @param quilt_build_params [QuiltBuildParams] The build data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_quilt_from_build(quilt_id, quilt_build_params, opts = {})
      data, _status_code, _headers = delete_quilt_from_build_with_http_info(quilt_id, quilt_build_params, opts)
      data
    end

    # Unlink a build from a Quilt version
    # @param quilt_id [String] A quilt identifier or slug
    # @param quilt_build_params [QuiltBuildParams] The build data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_quilt_from_build_with_http_info(quilt_id, quilt_build_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuiltApi.delete_quilt_from_build ...'
      end
      # verify the required parameter 'quilt_id' is set
      if @api_client.config.client_side_validation && quilt_id.nil?
        raise ArgumentError, "Missing the required parameter 'quilt_id' when calling QuiltApi.delete_quilt_from_build"
      end
      # verify the required parameter 'quilt_build_params' is set
      if @api_client.config.client_side_validation && quilt_build_params.nil?
        raise ArgumentError, "Missing the required parameter 'quilt_build_params' when calling QuiltApi.delete_quilt_from_build"
      end

      # resource path
      local_var_path = '/quilt/{quilt_id}/builds'.sub('{' + 'quilt_id' + '}', CGI.escape(quilt_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(quilt_build_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'QuiltApi.delete_quilt_from_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuiltApi#delete_quilt_from_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch the builds attached to a Quilt version
    # @param quilt_id [String] A quilt identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [QuiltBuilds]
    def list_quilt_builds(quilt_id, opts = {})
      data, _status_code, _headers = list_quilt_builds_with_http_info(quilt_id, opts)
      data
    end

    # Fetch the builds attached to a Quilt version
    # @param quilt_id [String] A quilt identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(QuiltBuilds, Integer, Hash)>] QuiltBuilds data, response status code and response headers
    def list_quilt_builds_with_http_info(quilt_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuiltApi.list_quilt_builds ...'
      end
      # verify the required parameter 'quilt_id' is set
      if @api_client.config.client_side_validation && quilt_id.nil?
        raise ArgumentError, "Missing the required parameter 'quilt_id' when calling QuiltApi.list_quilt_builds"
      end

      allowable_values = %w[name public]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/quilt/{quilt_id}/builds'.sub('{' + 'quilt_id' + '}', CGI.escape(quilt_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuiltBuilds'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'QuiltApi.list_quilt_builds',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuiltApi#list_quilt_builds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch the available Quilt versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @return [Quilts]
    def list_quilts(opts = {})
      data, _status_code, _headers = list_quilts_with_http_info(opts)
      data
    end

    # Fetch the available Quilt versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @return [Array<(Quilts, Integer, Hash)>] Quilts data, response status code and response headers
    def list_quilts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuiltApi.list_quilts ...'
      end
      # resource path
      local_var_path = '/quilt'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Quilts'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'QuiltApi.list_quilts',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuiltApi#list_quilts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update the available Quilt versions
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def update_quilt(opts = {})
      data, _status_code, _headers = update_quilt_with_http_info(opts)
      data
    end

    # Update the available Quilt versions
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def update_quilt_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuiltApi.update_quilt ...'
      end
      # resource path
      local_var_path = '/quilt'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'QuiltApi.update_quilt',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuiltApi#update_quilt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
