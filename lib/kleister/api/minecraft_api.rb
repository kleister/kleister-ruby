=begin
#Kleister OpenAPI

#API definition for Kleister, manage mod packs for Minecraft

The version of the OpenAPI document: 1.0.0-alpha1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'uri'

module Kleister
  class MinecraftApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign a build to a Minecraft version
    # @param minecraft_id [String] A minecraft UUID or slug
    # @param params [MinecraftBuildParams] The build data to append
    # @param [Hash] opts the optional parameters
    # @return [Array<Build>]
    def append_minecraft_to_build(minecraft_id, params, opts = {})
      data, _status_code, _headers = append_minecraft_to_build_with_http_info(minecraft_id, params, opts)
      data
    end

    # Assign a build to a Minecraft version
    # @param minecraft_id [String] A minecraft UUID or slug
    # @param params [MinecraftBuildParams] The build data to append
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Build>, Integer, Hash)>] Array<Build> data, response status code and response headers
    def append_minecraft_to_build_with_http_info(minecraft_id, params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MinecraftApi.append_minecraft_to_build ...'
      end
      # verify the required parameter 'minecraft_id' is set
      if @api_client.config.client_side_validation && minecraft_id.nil?
        fail ArgumentError, "Missing the required parameter 'minecraft_id' when calling MinecraftApi.append_minecraft_to_build"
      end
      # verify the required parameter 'params' is set
      if @api_client.config.client_side_validation && params.nil?
        fail ArgumentError, "Missing the required parameter 'params' when calling MinecraftApi.append_minecraft_to_build"
      end
      # resource path
      local_var_path = '/minecraft/{minecraft_id}/builds'.sub('{' + 'minecraft_id' + '}', minecraft_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(params) 

      # return_type
      return_type = opts[:return_type] || 'Array<Build>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MinecraftApi#append_minecraft_to_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlink a build from a Minecraft version
    # @param minecraft_id [String] A minecraft UUID or slug
    # @param params [MinecraftBuildParams] The build data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<Build>]
    def delete_minecraft_from_build(minecraft_id, params, opts = {})
      data, _status_code, _headers = delete_minecraft_from_build_with_http_info(minecraft_id, params, opts)
      data
    end

    # Unlink a build from a Minecraft version
    # @param minecraft_id [String] A minecraft UUID or slug
    # @param params [MinecraftBuildParams] The build data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Build>, Integer, Hash)>] Array<Build> data, response status code and response headers
    def delete_minecraft_from_build_with_http_info(minecraft_id, params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MinecraftApi.delete_minecraft_from_build ...'
      end
      # verify the required parameter 'minecraft_id' is set
      if @api_client.config.client_side_validation && minecraft_id.nil?
        fail ArgumentError, "Missing the required parameter 'minecraft_id' when calling MinecraftApi.delete_minecraft_from_build"
      end
      # verify the required parameter 'params' is set
      if @api_client.config.client_side_validation && params.nil?
        fail ArgumentError, "Missing the required parameter 'params' when calling MinecraftApi.delete_minecraft_from_build"
      end
      # resource path
      local_var_path = '/minecraft/{minecraft_id}/builds'.sub('{' + 'minecraft_id' + '}', minecraft_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(params) 

      # return_type
      return_type = opts[:return_type] || 'Array<Build>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MinecraftApi#delete_minecraft_from_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch the builds assigned to a Minecraft version
    # @param minecraft_id [String] A minecraft UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<Build>]
    def list_minecraft_builds(minecraft_id, opts = {})
      data, _status_code, _headers = list_minecraft_builds_with_http_info(minecraft_id, opts)
      data
    end

    # Fetch the builds assigned to a Minecraft version
    # @param minecraft_id [String] A minecraft UUID or slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Build>, Integer, Hash)>] Array<Build> data, response status code and response headers
    def list_minecraft_builds_with_http_info(minecraft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MinecraftApi.list_minecraft_builds ...'
      end
      # verify the required parameter 'minecraft_id' is set
      if @api_client.config.client_side_validation && minecraft_id.nil?
        fail ArgumentError, "Missing the required parameter 'minecraft_id' when calling MinecraftApi.list_minecraft_builds"
      end
      # resource path
      local_var_path = '/minecraft/{minecraft_id}/builds'.sub('{' + 'minecraft_id' + '}', minecraft_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Build>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MinecraftApi#list_minecraft_builds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch the available Minecraft versions
    # @param [Hash] opts the optional parameters
    # @return [Array<Minecraft>]
    def list_minecrafts(opts = {})
      data, _status_code, _headers = list_minecrafts_with_http_info(opts)
      data
    end

    # Fetch the available Minecraft versions
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Minecraft>, Integer, Hash)>] Array<Minecraft> data, response status code and response headers
    def list_minecrafts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MinecraftApi.list_minecrafts ...'
      end
      # resource path
      local_var_path = '/minecraft'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Minecraft>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MinecraftApi#list_minecrafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for available Minecraft versions
    # @param minecraft_id [String] A search token to search Minecraft versions
    # @param [Hash] opts the optional parameters
    # @return [Array<Minecraft>]
    def search_minecrafts(minecraft_id, opts = {})
      data, _status_code, _headers = search_minecrafts_with_http_info(minecraft_id, opts)
      data
    end

    # Search for available Minecraft versions
    # @param minecraft_id [String] A search token to search Minecraft versions
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Minecraft>, Integer, Hash)>] Array<Minecraft> data, response status code and response headers
    def search_minecrafts_with_http_info(minecraft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MinecraftApi.search_minecrafts ...'
      end
      # verify the required parameter 'minecraft_id' is set
      if @api_client.config.client_side_validation && minecraft_id.nil?
        fail ArgumentError, "Missing the required parameter 'minecraft_id' when calling MinecraftApi.search_minecrafts"
      end
      # resource path
      local_var_path = '/minecraft/{minecraft_id}'.sub('{' + 'minecraft_id' + '}', minecraft_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Minecraft>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MinecraftApi#search_minecrafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the available Minecraft versions
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_minecraft(opts = {})
      data, _status_code, _headers = update_minecraft_with_http_info(opts)
      data
    end

    # Update the available Minecraft versions
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_minecraft_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MinecraftApi.update_minecraft ...'
      end
      # resource path
      local_var_path = '/minecraft'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MinecraftApi#update_minecraft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
