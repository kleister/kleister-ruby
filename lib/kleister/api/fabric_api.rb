# Kleister OpenAPI
#
# API definition for Kleister, manage mod packs for Minecraft
#
# The version of the OpenAPI document: 1.0.0-alpha1
# Contact: kleister@webhippie.de
# Generated by: https://openapi-generator.tech
# Generator version: 7.6.0
#

require 'cgi'

module Kleister
  class FabricApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Attach a build to a Fabric version
    # @param fabric_id [String] A fabric identifier or slug
    # @param fabric_build_params [FabricBuildParams] The build data to attach
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def attach_fabric_to_build(fabric_id, fabric_build_params, opts = {})
      data, _status_code, _headers = attach_fabric_to_build_with_http_info(fabric_id, fabric_build_params, opts)
      data
    end

    # Attach a build to a Fabric version
    # @param fabric_id [String] A fabric identifier or slug
    # @param fabric_build_params [FabricBuildParams] The build data to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def attach_fabric_to_build_with_http_info(fabric_id, fabric_build_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FabricApi.attach_fabric_to_build ...'
      end
      # verify the required parameter 'fabric_id' is set
      if @api_client.config.client_side_validation && fabric_id.nil?
        raise ArgumentError, "Missing the required parameter 'fabric_id' when calling FabricApi.attach_fabric_to_build"
      end
      # verify the required parameter 'fabric_build_params' is set
      if @api_client.config.client_side_validation && fabric_build_params.nil?
        raise ArgumentError, "Missing the required parameter 'fabric_build_params' when calling FabricApi.attach_fabric_to_build"
      end

      # resource path
      local_var_path = '/fabric/{fabric_id}/builds'.sub('{' + 'fabric_id' + '}', CGI.escape(fabric_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fabric_build_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'FabricApi.attach_fabric_to_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#attach_fabric_to_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Unlink a build from a Fabric version
    # @param fabric_id [String] A fabric identifier or slug
    # @param fabric_build_params [FabricBuildParams] The build data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def delete_fabric_from_build(fabric_id, fabric_build_params, opts = {})
      data, _status_code, _headers = delete_fabric_from_build_with_http_info(fabric_id, fabric_build_params, opts)
      data
    end

    # Unlink a build from a Fabric version
    # @param fabric_id [String] A fabric identifier or slug
    # @param fabric_build_params [FabricBuildParams] The build data to unlink
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def delete_fabric_from_build_with_http_info(fabric_id, fabric_build_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FabricApi.delete_fabric_from_build ...'
      end
      # verify the required parameter 'fabric_id' is set
      if @api_client.config.client_side_validation && fabric_id.nil?
        raise ArgumentError, "Missing the required parameter 'fabric_id' when calling FabricApi.delete_fabric_from_build"
      end
      # verify the required parameter 'fabric_build_params' is set
      if @api_client.config.client_side_validation && fabric_build_params.nil?
        raise ArgumentError, "Missing the required parameter 'fabric_build_params' when calling FabricApi.delete_fabric_from_build"
      end

      # resource path
      local_var_path = '/fabric/{fabric_id}/builds'.sub('{' + 'fabric_id' + '}', CGI.escape(fabric_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fabric_build_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'FabricApi.delete_fabric_from_build',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#delete_fabric_from_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch the builds attached to a Fabric version
    # @param fabric_id [String] A fabric identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'build_name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [FabricBuilds]
    def list_fabric_builds(fabric_id, opts = {})
      data, _status_code, _headers = list_fabric_builds_with_http_info(fabric_id, opts)
      data
    end

    # Fetch the builds attached to a Fabric version
    # @param fabric_id [String] A fabric identifier or slug
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @option opts [String] :sort Sorting column (default to 'build_name')
    # @option opts [String] :order Sorting order (default to 'asc')
    # @option opts [Integer] :limit Paging limit (default to 100)
    # @option opts [Integer] :offset Paging offset (default to 0)
    # @return [Array<(FabricBuilds, Integer, Hash)>] FabricBuilds data, response status code and response headers
    def list_fabric_builds_with_http_info(fabric_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FabricApi.list_fabric_builds ...'
      end
      # verify the required parameter 'fabric_id' is set
      if @api_client.config.client_side_validation && fabric_id.nil?
        raise ArgumentError, "Missing the required parameter 'fabric_id' when calling FabricApi.list_fabric_builds"
      end

      allowable_values = %w[build_name build_public pack_slug pack_name]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      allowable_values = %w[asc desc]
      if @api_client.config.client_side_validation && opts[:order] && !allowable_values.include?(opts[:order])
        raise ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/fabric/{fabric_id}/builds'.sub('{' + 'fabric_id' + '}', CGI.escape(fabric_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:order] = opts[:order] unless opts[:order].nil?
      query_params[:limit] = opts[:limit] unless opts[:limit].nil?
      query_params[:offset] = opts[:offset] unless opts[:offset].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FabricBuilds'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'FabricApi.list_fabric_builds',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_fabric_builds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Fetch the available Fabric versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @return [Fabrics]
    def list_fabrics(opts = {})
      data, _status_code, _headers = list_fabrics_with_http_info(opts)
      data
    end

    # Fetch the available Fabric versions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search query
    # @return [Array<(Fabrics, Integer, Hash)>] Fabrics data, response status code and response headers
    def list_fabrics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FabricApi.list_fabrics ...'
      end
      # resource path
      local_var_path = '/fabric'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:search] = opts[:search] unless opts[:search].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Fabrics'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'FabricApi.list_fabrics',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#list_fabrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update the available Fabric versions
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def update_fabric(opts = {})
      data, _status_code, _headers = update_fabric_with_http_info(opts)
      data
    end

    # Update the available Fabric versions
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Integer, Hash)>] Notification data, response status code and response headers
    def update_fabric_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FabricApi.update_fabric ...'
      end
      # resource path
      local_var_path = '/fabric'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Notification'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Cookie Basic Header Bearer]

      new_options = opts.merge(
        operation: :'FabricApi.update_fabric',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FabricApi#update_fabric\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
