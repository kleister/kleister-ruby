# Kleister OpenAPI
#
# API definition for Kleister, manage mod packs for Minecraft
#
# The version of the OpenAPI document: 1.0.0-alpha1
# Contact: kleister@webhippie.de
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'cgi'

module Kleister
  class ProfileApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Fetch profile details of the personal account
    # @param [Hash] opts the optional parameters
    # @return [Profile]
    def show_profile(opts = {})
      data, _status_code, _headers = show_profile_with_http_info(opts)
      data
    end

    # Fetch profile details of the personal account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Profile, Integer, Hash)>] Profile data, response status code and response headers
    def show_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.show_profile ...'
      end
      # resource path
      local_var_path = '/profile/self'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Profile'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ProfileApi.show_profile',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#show_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Retrieve an unlimited auth token
    # @param [Hash] opts the optional parameters
    # @return [AuthToken]
    def token_profile(opts = {})
      data, _status_code, _headers = token_profile_with_http_info(opts)
      data
    end

    # Retrieve an unlimited auth token
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthToken, Integer, Hash)>] AuthToken data, response status code and response headers
    def token_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.token_profile ...'
      end
      # resource path
      local_var_path = '/profile/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ProfileApi.token_profile',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#token_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update your own profile information
    # @param update_profile_request [UpdateProfileRequest] The profile data to update
    # @param [Hash] opts the optional parameters
    # @return [Profile]
    def update_profile(update_profile_request, opts = {})
      data, _status_code, _headers = update_profile_with_http_info(update_profile_request, opts)
      data
    end

    # Update your own profile information
    # @param update_profile_request [UpdateProfileRequest] The profile data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Profile, Integer, Hash)>] Profile data, response status code and response headers
    def update_profile_with_http_info(update_profile_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfileApi.update_profile ...'
      end
      # verify the required parameter 'update_profile_request' is set
      if @api_client.config.client_side_validation && update_profile_request.nil?
        raise ArgumentError, "Missing the required parameter 'update_profile_request' when calling ProfileApi.update_profile"
      end

      # resource path
      local_var_path = '/profile/self'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_profile_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Profile'

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[Basic Header Bearer]

      new_options = opts.merge(
        operation: :'ProfileApi.update_profile',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfileApi#update_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
